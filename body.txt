



Speaking Notes/ Summary

  - Describe gems
  - Walk through hub usage
  - The value of packaging your code
  -
  
  

## Describe Gems

So if you're new to ruby gems, let's start out with a very basic description.

  "A gem is a piece of ruby code that has been formatted into an easy to manage package."
  
So if you've ever used the `apt-get` package manager on debian based linux distros, that's pretty much what gems are, but for code within the ruby echosystem.  


## Example of a Gem

Let's go over an example of a very popular gem, Hub.  Hub is a ruby gem that allows you to interact with github from the command line.  

Hub can easily be installed on any machine that has ruby installed by the below command:

```
  $  gem install hub
  
  Fetching: hub-1.12.4.gem (100%)
```

Go ahead and try it now.  In the command's output, you'll see that it fetched `hub-1.12.4.gem`.  That's telling you the name of the gem and the version installed... Gem defaults to the latest version of any given gem.  If that version is no good, you can tell gem to install a specific version manually.  

```
  $  gem install -v 1.12.3
```


Hub is a CLI tool.  Most ruby gems are just libraries, code that you use from within other ruby code, but we're installing a ruby gem that has a "binary file" component.  
Once you install a CLI gem, the binary becomes exposed on the system path.  Typing `which hub` will show you where this "binary" is.  
I'm scare quoting the term binary because if you open that file up, you'll actually see that it's just a ruby script with a shebang.  

Now you have two versions of a CLI gem on your system.  How do you choose between them?  
By default the latest version is used, which is probably ideal, but you can explicitly declare which gem to use by making the first argument an underscoric version identifier.

```
  $ hub _1.12.3_ --version
```







## The value of packaging your code

When I first learned to package my code, I became filled me with feelings of empowerment.  
Not only was I able to look at all those gems that other professionals had built, and understand how that was made useable to me...
But it also gave me the power to:  
  - Easily Deploy my code on a foriegn server
  - Easily include my code in OTHER ruby projects
  - Easily update my code (after the fact) without breaking dependant codebases
  - Easily share my code with others

  Everything about making ruby gems leads to:
    - increased developer performance 
    - reduced overhead on compatibility issues 
    - And overall lower cost per employee

Everything about making gems leads to really complicated, stressful things suddenly becoming _easy_.  

So let's get started making our lives better by packaging up some code.  









